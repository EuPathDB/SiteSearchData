<?xml version="1.0" encoding="UTF-8"?>
<wdkModel>

    <!-- 
    Group ID Queries
    -->

    <querySet name="GroupIdQueries" queryType="id" isCacheable="true">

      <!-- an id query that returns groups ending with the provided numeral.  This is easy way to divide groups into chunks, to avoid massive JSON files -->
      <sqlQuery name="GroupsByLastNumeral">
        <paramRef ref="groupParams.numeral"/>
        <column name="group_name"/>
        <sql>
          <![CDATA[
            select distinct group_id as group_name
            from apidb.OrthologGroup
            where group_id like '%' || $$numeral$$
          ]]>
        </sql>
      </sqlQuery>

      <sqlQuery name="Alias">
        <column name="group_name"/>
        <column name="old_group_name"/>
        <sql>
          <![CDATA[
            select distinct group_id as group_name, group_id as old_group_name
            from apidb.OrthologGroup
          ]]>
        </sql>
      </sqlQuery>

    </querySet>

    <paramSet name="groupParams">
          <stringParam name="numeral"
                       prompt="numeral"
                       number="false"/>
      </paramSet>


    <!-- 
    Group Attribute Queries
    -->
    
    <querySet name="GroupAttributes" queryType="attribute" isCacheable="false">


        <sqlQuery name="GroupAttrs">
            <column name="group_name"/>
            <column name="is_residual"/>
            <column name="number_of_members"/>
            <column name="number_of_core_members"/>
            <column name="number_of_peripheral_members"/>
            <sql>
            <![CDATA[
		     SELECT group_id as group_name, is_residual
                            number_of_members, number_of_core_members,
                            number_of_peripheral_members
		     FROM apidb.OrthologGroup
			]]>
            </sql>
        </sqlQuery>


        <sqlQuery name="MaxSequenceLength">
          <column name="group_name"/>
          <column name="max_length"/>
          <sql>
            <![CDATA[
              select group_name, max(length) AS max_length
              from ApidbTuning.SequenceAttributes
              group by group_name
            ]]>
          </sql>
        </sqlQuery>


	<sqlQuery name="EcNumbers">
	  <column name="group_name" />
	  <column name="ec_numbers" />
	  <sql>
            <![CDATA[
              select group_name,
                     listagg(ec_number, ', ') within group (order by ec_number) as ec_numbers
              from (select distinct sa.group_name, ec.ec_number
                    from sres.EnzymeClass ec, dots.AaSequenceEnzymeClass asec, apidbTuning.SequenceAttributes sa
                    where ec.enzyme_class_id = asec.enzyme_class_id
                      and asec.aa_sequence_id = sa.aa_sequence_id)
              group by group_name
            ]]>
	  </sql>
	</sqlQuery>

	<sqlQuery name="Keywords">
	  <column name="group_name" />
	  <column name="keywords" />
	  <sql>
            <![CDATA[
              select og.group_id as group_name, verbiage.keywords
              from apidb.OrthologGroup og,
                   (select ortholog_group_id,
                           listagg(keyword, '; ') within group (order by to_number(frequency) desc) as keywords
                    from apidb.OrthomclGroupKeyword
                    group by ortholog_group_id
                   ) verbiage
              where og.group_id = verbiage.ortholog_group_id(+)
            ]]>
	  </sql>
	</sqlQuery>

	<sqlQuery name="Domains">
	  <column name="group_name" />
	  <column name="descriptions" />
	  <sql>
            <![CDATA[
              select og.group_id as group_name, domains.descriptions
              from apidb.OrthologGroup og,
                   (select ortholog_group_id,
                           listagg(description, '; ') within group (order by frequency desc) as descriptions
                    from apidb.OrthomclGroupDomain
                    group by ortholog_group_id
                   ) domains
              where og.ortholog_group_id = domains.ortholog_group_id(+)
            ]]>
	  </sql>
	</sqlQuery>

    </querySet>

    <!-- 
    Group Table Queries                                     
    -->

    <querySet name="GroupTables" queryType="table"  isCacheable="false">

        <sqlQuery name="Proteins">
            <column name="core_peripheral"/>
            <column name="group_name"/>
            <column name="full_id"/>
            <column name="source_id"/>
            <column name="taxon_name"/>
            <column name="taxon_abbrev"/>
            <column name="length"/>
            <column name="description"/>
            <sql>
              <![CDATA[
                select case sa.core_peripheral when 'C' then 'Core' when 'P' then 'Peripheral' else '' end as core_peripheral,
		       sa.group_name, sa.full_id, sa.organism_name AS taxon_name, sa.taxon_abbreviation AS taxon_abbrev,
                       sa.length, sa.product as description, sa.source_id
                from ApidbTuning.SequenceAttributes sa
              ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="PFams">
          <column name="group_name"/>
          <column name="accession"/>
          <column name="description"/>
          <column name="num_proteins"/>
          <column name="domain_index"/>
          <column name="max_index"/>
          <sql>
            <![CDATA[
     SELECT group_name, accession, description, domain_index, COUNT(distinct full_id) as num_proteins,
            (SELECT MAX(domain_index) FROM ApidbTuning.DomainAssignment) AS max_index
     FROM ApidbTuning.DomainAssignment
     GROUP BY group_name, accession, description, domain_index
     ORDER BY accession
            ]]>
          </sql>
        </sqlQuery>

        <sqlQuery name="ProteinPFams">
          <column name="group_name"/>
          <column name="accession"/>
          <column name="full_id"/>
          <column name="protein_length"/>
          <column name="core_peripheral"/>
          <column name="domain_index"/>
          <column name="start_min"/>
          <column name="end_max"/>
          <sql>
<!-- The ProteinPFams query did not work correctly on the website because of the SQL wrapped around it.
     The minimum of all lengths was shown for each protein. The original phrase that resulted in this
     error was sa.length, but the current phrase round(sa.length,0) fixed this in an unknown way.  -->
            <![CDATA[
     SELECT sa.group_name, sa.full_id, round(sa.length,0) as protein_length,
     case sa.core_peripheral when 'C' then 'Core' when 'P' then 'Peripheral' else '' end as core_peripheral,
     da.accession, da.domain_index, da.start_min, da.end_max
     from ApidbTuning.SequenceAttributes sa            
     Left outer join ApidbTuning.DomainAssignment da
     on da.full_id = sa.full_id
     ORDER BY sa.full_id, da.start_min
            ]]>
          </sql>
        </sqlQuery>

        <sqlQuery name="EcNumber">
          <column name="group_name"/>
          <column name="ec_number"/>
          <column name="description"/>
          <column name="sequence_count"/>
          <sql>
            <![CDATA[
              select sa.group_name, ec_map.ec_number, ec_map.description, count(*) as sequence_count
              from ApidbTuning.SequenceAttributes sa,
                   (select distinct asec.aa_sequence_id, ec.ec_number, ec.description
                    from dots.AaSequenceEnzymeClass asec, sres.enzymeClass ec
                    where asec.enzyme_class_id = ec.enzyme_class_id) ec_map
              where ec_map.aa_sequence_id = sa.aa_sequence_id
              group by sa.group_name, ec_map.ec_number, ec_map.description
              order by sa.group_name, sequence_count desc
            ]]>
          </sql>
        </sqlQuery>

        <sqlQuery name="GroupName">
          <column name="group_name"/>
          <column name="name_string"/>

          <sql>
            <![CDATA[
              select group_id as group_name, group_id as name_string
              from apidb.OrthologGroup
            ]]>
          </sql>
        </sqlQuery>


        <sqlQuery name="KeywordFrequency">
          <column name="group_name" />
          <column name="keyword" />
          <column name="frequency" />
          <sql>
            <![CDATA[
              select og.group_id as group_name, k.keyword, k.frequency
              from apidb.OrthologGroup og, apidb.OrthomclGroupKeyword k
              where og.group_id = k.ortholog_group_id
            ]]>
          </sql>
        </sqlQuery>

        <sqlQuery name="PreviousGroups">
          <column name="group_name" />
          <column name="prev_group" />
          <sql>
            <![CDATA[
               select new_group_id as group_name, old_group_id as previous_group
                  from apidb.groupmapping 
                  where new_group_id <> old_group_id		  
            ]]>
          </sql>
        </sqlQuery>

        <sqlQuery name="DomainFrequency">
          <column name="group_name" />
          <column name="keyword" />
          <column name="frequency" />
          <sql>
            <![CDATA[
              select og.group_id as group_name, d.description AS keyword, d.frequency
              from apidb.OrthologGroup og, apidb.OrthomclGroupDomain d
              where og.ortholog_group_id = d.ortholog_group_id
            ]]>
          </sql>
        </sqlQuery>


    </querySet>
</wdkModel>
