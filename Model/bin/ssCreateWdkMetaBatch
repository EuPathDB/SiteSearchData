#!/usr/bin/env python3

import json
import argparse
import sys
import os
import time
import datetime

sys.path.append(os.environ['GUS_HOME'] + "/lib/python")

import SiteSearchData.Model.BatchReportUtils as utils

TARGETDIRPREFIX = 'solr-json-batch_'
BATCHTYPE = 'wdkmeta'
SEARCHDOCTYPE = 'search'
ATTR_PREFIX = 'TEXT__'

def parseAndValidateArgs():
    help = """Read the WDK record-type endpoint from an application website (eg, PlasmoDB) and create a solr-compatible JSON file with searchable meta information about the record types.  For now only includes information about searches.  Also produces a JSON file containing meta information about this batch of files.

Input: URL for a WDK service to call
Output: a directory containing a Solr compatible JSON file and a batch.json file with meta information.

The batch is given a generated BATCH_ID of the form: wdkmeta-PROJECT_ID-TIMESTAMP

Reports are generated into a directory of name 'PARENTDIR/BATCH_ID'. 

"""
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description=help)
    parser.add_argument("webSiteServiceUrl", help="Base url of WDK service from the website to read from")
    parser.add_argument("project", help="Project ID of the website to read from, e.g., PlasmoDB")
    parser.add_argument("parentDir", help="Directory in which to put the directory of output files")
    args = parser.parse_args()
    utils.validateWebServiceUrl(args.webSiteServiceUrl)
    utils.validateParentDir(args.parentDir)
    return args.webSiteServiceUrl, args.parentDir, args.project

    

###########################################################################################################

wdkServiceUrl, parentDir, projectId = parseAndValidateArgs()
batchName = projectId
utils.failIfPreviousBatchDir(parentDir, BATCHTYPE, batchName)
batchTimestamp = int(time.time())
batchId = BATCHTYPE + "_" + batchName + "_" + str(batchTimestamp)

outputDir = utils.createWorkingDir(parentDir, batchId)
targetFilename = outputDir + "/" + BATCHTYPE + ".json"

outputSearches = []

for recordTypeName in utils.getRecordTypeNames(wdkServiceUrl):
    recordType = utils.getRecordType(wdkServiceUrl, recordTypeName)
    filteredSearches = list(filter(lambda search: 'InternalQuestions' not in search['fullName'], recordType['searches']))
    filteredSearches = list(filter(lambda search: 'byWeightFilter' not in search['urlSegment'], filteredSearches))
    for search in filteredSearches:
        outputSearch = {}
        outputSearch['batch-type'] = BATCHTYPE
        outputSearch['batch-name'] = batchName
        outputSearch['project'] = projectId
        outputSearch['batch-timestamp'] = batchTimestamp
        outputSearch['batch-id'] = batchId
        outputSearch['document-type'] = SEARCHDOCTYPE
        outputSearch['id'] = 'search_' + search['urlSegment'] + '_' + recordTypeName + '_' + projectId
        outputSearch['primaryKey'] = [search['urlSegment'], recordTypeName]
        outputSearch[ATTR_PREFIX + 'search_' + 'name'] = search['urlSegment']
        if 'displayName' in search:
            outputSearch[ATTR_PREFIX + 'search_' + 'displayName'] = search['displayName']
            outputSearch['hyperlinkName'] = recordType['displayNamePlural'] + " by " + search['displayName']
        if 'description' in search:
            outputSearch[ATTR_PREFIX + 'search_' + 'description'] = search['description']
        if 'summary' in search:
            outputSearch[ATTR_PREFIX + 'search_' + 'summary'] = search['summary']
        outputSearch[ATTR_PREFIX + 'search_' + 'record-type'] = recordTypeName
        outputSearches.append(outputSearch)

searchJson = json.dumps(outputSearches)
print(str(datetime.datetime.now()) + " writing " + targetFilename)
with open(targetFilename, "w") as text_file:
    text_file.write(searchJson)

# write meta file about this batch
print(str(datetime.datetime.now()) + " writing batch.json")
utils.writeBatchJsonFile(BATCHTYPE, batchName, batchTimestamp, batchId, outputDir)
print(str(datetime.datetime.now()) + " done")
    

    

