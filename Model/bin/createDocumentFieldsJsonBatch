#!/usr/bin/env python3

import requests
import json
import argparse
import sys
import os
import time
import datetime

sys.path.append(os.environ['GUS_HOME'] + "/lib/python")

import SiteSearchData.Model.BatchReportUtils as utils

TARGETDIRPREFIX = 'solr-json-batch_'
BATCHTYPE = 'document-fields'
BATCHNAME = 'all'
DOCTYPE = 'document-fields'
INPUT_FILE = os.environ['GUS_HOME'] + "/data/SiteSearchData/Model/nonWdkDocumentFields.json"
TEXT_PREFIX = "TEXT__"
MULTITEXT_PREFIX = "MULTITEXT__"

def parseAndValidateArgs():
    help = """Read the SiteSearchData WDK model as well as a nonWdkDocumentFields.json file to acquire information about all fields in all documents used in SiteSearch (solr).  Generate a solr loadable batch of json files, including a documentFields.json that describes the fields.

For each field we will report:
 - name
 - isSummary (whether this field should be included in a summary display of this document in the UI)
 - boostFactor (a multiplier indicating how to boost this field in solr scoring)

(The isSummary and boostFactor values come from <property> elements in wdk attributes in the SiteSearchData model)

Input: 
  URL for a SiteSearchData WDK service to call

Output: a directory containing one or more Solr compatible JSON files, one per included record type, and a batch.json file with meta information.

The batch is given a generated BATCH_ID of the form: BATCHTYPE-BATCHNAME-timestamp

Reports are generated into a directory of name 'PARENTDIR/BATCH_ID'. 

"""
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description=help)
    parser.add_argument("wdkServiceUrl", help="Base url of SiteSearchData WDK service")
    parser.add_argument("parentDir", help="Directory in which to put the directory of output files")

    args = parser.parse_args()
    utils.validateWebServiceUrl(args.wdkServiceUrl)
    utils.validateParentDir(args.parentDir)
    return args.wdkServiceUrl, args.parentDir

# see if a wdk field (attr or table) is a summary field for site search
def getFieldIsSummary(field):
    if ('properties' in field and 'isSummary' in field['properties']):
        return field['properties']['isSummary'][0] == "true"
    else:
        return False

# get the solr scoring boost for a wdk field (attr or table)
def getFieldBoostFactor(field):
    if ('properties' in field and 'boost' in field['properties']):
        return int(field['properties']['boost'][0])
    else:
        return 1
    
def getWdkDocumentFieldsJson(wdkServiceUrl):
    wdkDocumentFields = []  # an array of description of documents
    # for each record type, find tables and attributes and report on their fields.
    for recordTypeName in utils.getRecordTypeNames(wdkServiceUrl):
        recordType = utils.getRecordType(wdkServiceUrl, recordTypeName)
        document = {}
        document['document-type'] = recordTypeName
        document['fields'] = []
        attributes = recordType['attributes']
        for attribute in attributes:
            if not attribute['isDisplayable']:  #internal attribute
                break
            attrJson = {}
            attrJson['name'] = TEXT_PREFIX + recordTypeName + "_" + attribute['name']
            attrJson['displayName'] = attribute['displayName']
            attrJson['isSummary'] = getFieldIsSummary(attribute)
            attrJson['boost'] = getFieldBoostFactor(attribute)
            document['fields'].append(attrJson)
            tables = recordType['tables']
        for table in tables:
            if not attribute['isDisplayable']:  # internal table
                break
            tableJson = {}
            tableJson['name'] = MULTITEXT_PREFIX + recordTypeName + "_" + table['name']
            tableJson['displayName'] = table['displayName']
            tableJson['isSummary'] = getFieldIsSummary(table)
            tableJson['boost'] = getFieldBoostFactor(table)
            document['fields'].append(tableJson)
        wdkDocumentFields.append(document)
    return wdkDocumentFields

###########################################################################################################

wdkServiceUrl, parentDir = parseAndValidateArgs()

batchTimestamp = int(time.time())
batchId = BATCHTYPE + "_" + BATCHNAME + "_" + str(batchTimestamp)

outputDir = utils.createWorkingDir(parentDir, batchId)
targetFilename = outputDir + "/" + BATCHTYPE + ".json"

try:
    with open(INPUT_FILE) as inputJsonFile:
        jsonFieldsArray = json.load(inputJsonFile)  # get fields for non-wdk documents from input file
        jsonFieldsArray = jsonFieldsArray + getWdkDocumentFieldsJson(wdkServiceUrl)
        jsonString = json.dumps(jsonFieldsArray)
        output = {}
        output['batch-type'] = BATCHTYPE
        output['batch-name'] = BATCHNAME
        output['batch-timestamp'] = batchTimestamp
        output['batch-id'] = batchId
        output['document-type'] = DOCTYPE
        output['id'] = DOCTYPE
        output['json-blob'] = jsonString
        outputArray = []
        outputArray = [output]
except IOError:
    utils.error("Can't open input file " + INPUT_FILE)
#except:
#    utils.error("Looks like input file " + INPUT_FILE + " is not valid json")

    
searchJson = json.dumps(outputArray)
print(str(datetime.datetime.now()) + " writing " + targetFilename)
with open(targetFilename, "w") as text_file:
    text_file.write(searchJson)

# write meta file about this batch
print(str(datetime.datetime.now()) + " writing batch.json")
utils.writeBatchJsonFile(BATCHTYPE, BATCHNAME, batchTimestamp, batchId, outputDir)
print(str(datetime.datetime.now()) + " done")
    

    

