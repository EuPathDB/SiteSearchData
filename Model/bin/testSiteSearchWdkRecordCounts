#!/usr/bin/perl
use strict;

use JSON;
use LWP::UserAgent;
use LWP::Simple;
use Data::Dumper;

my ($siteUrl, $project, $webappName) = @ARGV;

&usage unless $siteUrl && $project && $webappName;

my $apiCommonRecordTypes =
  {'gene' => 'AllGenes',
   'est' => 'AllEsts',
   'popsetSequence' => 'AllPopsetSeqs',
   'organism' => 'AllOrganisms',
   'genomic-sequence' => 'AllGenomicSeqs',
   'compound' => 'AllCompounds',
 #  'popbio-sample' => '',
   'pathway' => 'AllPathways',
   'dataset' => 'AllDatasets',
   };

$apiCommonRecordTypes =
  {'gene' => 'GenesByAllGenes'};

my $portalRecordTypes =
  {'Gene' => 'GenesByAllGenes',
   'EST' => 'ESTsByAllGenes',
   };

my $orthoRecordTypes =
  {'Gene' => 'GenesByAllGenes',
   'EST' => 'ESTsByAllGenes',
   };

my $recordTypes = $apiCommonRecordTypes;

$recordTypes = $portalRecordTypes if $project eq 'VEuPathDB';
$recordTypes = $orthoRecordTypes if $project eq 'OrthoMCL';

my $organisms = getOrganisms($siteUrl, $webappName);

my $docCountMap = getSiteSearchDocumentTypeCounts($siteUrl, $organisms);

foreach my $recordTypeName (keys %$recordTypes) {
  my $wdkCount = getWdkRecordCount($siteUrl, $webappName, $recordTypes->{$recordTypeName}, $recordTypeName);
  my $ssCount = $docCountMap->{$recordTypeName};

  die "TEST FAILURE: counts differ for record type: " . $recordTypeName . " (SS: $ssCount, WDK: $wdkCount)\n" unless $ssCount  == $wdkCount;
}

#############################################################################################
#############################################################################################

# run a site search for '*', asking for 0 rows back.  This gives us the metadata about the result.
# Return a map of document type to count
sub getSiteSearchDocumentTypeCounts {
  my ($siteUrl, $organisms) = @_;

  my $organismsJson = to_json($organisms);

  my $userAgent = LWP::UserAgent->new;
  my $ssUrl = "$siteUrl/site-search";
  my $ssJsonString = qq({"searchText": "*", "pagination": {"offset": 0, "numRecords": 0}, "restrictToProject": "$project"}, "restrictMetadataToOrganisms": $organsismsJson});

  my $req = HTTP::Request->new(POST => $ssUrl);
  $req->header( 'Content-Type' => 'application/json' );
  $req->content($ssJsonString);
  my $res = $userAgent->request($req);

  if (!$res->is_success) {
    die "ERROR reading solr '$ssUrl': ", $res->status_line, "\n";
  }

  my $ssResults = from_json($res->content);

  my $map;
  my $resultDocTypes = $ssResults->{documentTypes};
  foreach my $docType (@$resultDocTypes) {
    $map->{$docType->{'id'}} = $docType->{'count'};
  }

  return $map;
}

sub getWdkRecordCount {
  my ($siteUrl, $webappName, $searchName, $recordType) = @_;

  $recordType = 'transcript' if $recordType eq 'gene';

  my $jsonString = qq({"pagination": { "offset": 0, "numRecords": 0 },"attributes":["primary_key"],"tables":[]});

  my $wdkSearchUrl = "$siteUrl/$webappName/service/record-types/$recordType/searches/$searchName/reports/standard?reportConfig=$jsonString";

  my $contents = get($wdkSearchUrl);

print "\n$wdkSearchUrl\n";

  if (! defined $contents) {
    die "ERROR running wdk search with url ", $wdkSearchUrl, " ", "\n";
  }

  my $wdkResult = from_json($contents);

  return $wdkResult->{meta}->{displayTotalCount};
}

sub getOrganisms {
  my ($siteUrl, $webappName) = @_;

  $recordType = 'transcript' if $recordType eq 'gene';

  # https://sfischer.plasmodb.org/plasmo.sfischer/service/record-types/organism/searches/GenomeDataTypes/reports/standard?reportConfig={%22pagination%22:%20{%20%22offset%22:%200,%20%22numRecords%22:%201000%20},%22attributes%22:[%22primary_key%22],%22tables%22:[]}

  my $jsonString = qq({"pagination": { "offset": 0, "numRecords": -1 },"attributes":["primary_key"],"tables":[]});

  my $wdkOrganismsUrl = "$siteUrl/$webappName/service/record-types/organism/searches/$searchName/GenomeDataTypes/reports/standard?reportConfig=$jsonString";

  my $contents = get($wdkOrganismUrl);

print "\n$wdkSearchUrl\n";

  if (! defined $contents) {
    die "ERROR getting wdk organisms with url ", $wdkOrganismsUrl, " ", "\n";
  }

  my $wdkResult = from_json($contents);

  my $organisms = $wdkResult->{records};

  my $organismNames;
  foreach my $organism (@$organisms) {
    my $organismName = $organism->{primary_key};

    # remove html italics
    $organismName =~ s/\<i\>//;
    $organismName =~ s/\<\\i\>//;
    push(@$organismNames, $organismName);
  }

  return $organismNames;
}

sub usage {
  die "
Test the wdk records installed in a website's site search by comparing against the WDK records found by querying the WDK

Usage: testSiteSearchWdkRecordCounts website_url project webapp_name

Example: testSiteSearchWdkRecordCounts https://qa.plasmodb.org PlasmoDB plasmo.bld49

Uses a hard-coded list of record types expected in Solr.  (It has separate lists for component databases, VEuPathDB and OrthoMCL).

";
}

