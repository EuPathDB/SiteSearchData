#!/usr/bin/env python3

import json
import argparse
import sys
import os
import time
import datetime

sys.path.append(os.environ['GUS_HOME'] + "/lib/python")

import SiteSearchData.Model.BatchReportUtils as utils

TARGETDIRPREFIX = 'solr-json-batch_'
BATCHTYPE = 'wdkmeta'
BATCHNAME = 'all'
SEARCHDOCTYPE = 'search'

def parseAndValidateArgs():
    help = """Read the WDK record-type endpoint from an application website (eg, UniDB) and create a solr-compatible JSON file with searchable meta information about the record types.  For now only includes information about searches.  Also produces a JSON file containing meta information about this batch of files.

Input: URL for a WDK service to call
Output: a directory containing a Solr compatible JSON file and a batch.json file with meta information.

The batch is given a generated BATCH_ID of the form: wdkmeta-all-TIMESTAMP

Reports are generated into a directory of name 'PARENTDIR/BATCH_ID'. 

"""
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description=help)
    parser.add_argument("wdkServiceUrl", help="Base url of WDK service to read from")
    parser.add_argument("parentDir", help="Directory in which to put the directory of output files")
    args = parser.parse_args()
    utils.validateWebServiceUrl(args.wdkServiceUrl)
    utils.validateParentDir(args.parentDir)
    return args.wdkServiceUrl, args.parentDir

    

###########################################################################################################

wdkServiceUrl, parentDir = parseAndValidateArgs()

batchTimestamp = int(time.time())
batchId = BATCHTYPE + "_" + BATCHNAME + "_" + str(batchTimestamp)

outputDir = utils.createWorkingDir(parentDir, batchId)
targetFilename = outputDir + "/" + BATCHTYPE + ".json"

outputSearches = []

for recordTypeName in utils.getRecordTypeNames(wdkServiceUrl):
    recordType = utils.getRecordType(wdkServiceUrl, recordTypeName)
    filteredSearches = list(filter(lambda search: 'InternalQuestions' not in search['fullName'], recordType['searches']))
    for search in filteredSearches:
        outputSearch = {}
        outputSearch['batch-type'] = BATCHTYPE
        outputSearch['batch-name'] = BATCHNAME
        outputSearch['batch-timestamp'] = batchTimestamp
        outputSearch['batch-id'] = batchId
        outputSearch['document-type'] = SEARCHDOCTYPE
        outputSearch['id'] = search['urlSegment']
        if 'displayName' in search:
            outputSearch['displayName'] = search['displayName']
        if 'description' in search:
            outputSearch['description'] = search['description']
        outputSearch['record-type'] = recordTypeName
        outputSearches.append(outputSearch)

searchJson = json.dumps(outputSearches)
print(str(datetime.datetime.now()) + " writing " + targetFilename)
with open(targetFilename, "w") as text_file:
    text_file.write(searchJson)

# write meta file about this batch
print(str(datetime.datetime.now()) + " writing batch.json")
utils.writeBatchJsonFile(BATCHTYPE, BATCHNAME, batchTimestamp, batchId, outputDir)
print(str(datetime.datetime.now()) + " done")
    

    

