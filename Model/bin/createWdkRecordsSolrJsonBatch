#!/usr/bin/env python3

# importing the requests library 
import requests
import json
import argparse
import shutil
import sys
import os.path
import os
import time
import tarfile
import datetime

sys.path.append(os.environ['GUS_HOME'] + "/lib/python")

import SiteSearchData.Model.BatchReportUtils as utils

REPORTNAME = 'solrjson'
TARGETDIRPREFIX = 'solr-json-batch_'

def parseAndValidateArgs():
    help = """Read a WDK model dedicated to producing  JSON files for solr.  Runs WDK a report for each record type in the model to produce those files.  Also produces a JSON file containing meta information about this batch of files.

Input: URL for a WDK service to call
Output: a directory containing one or more Solr compatible JSON files, one per included record type, and a batch.json file with meta information.

The WDK model resident in the provided WDK service is expected to be dedicated to creating these reports.  It must conform to:
  - Having exactly the correct set of record types to produce reports for.
  - Each record type must have exactly one search.  
  - That search must have either zero or one parameters.
  - If it has one, the name and value will be supplied here on the command line.
  - Each record type must support the solrjson reporter.  
  - For each record type's report, all the record type's tables and attributes will be included

The batch is given a generated BATCH_ID of the form: BATCHTYPE-BATCHNAME-timestamp

Reports are generated into a directory of name 'PARENTDIR/BATCH_ID'. 

"""
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description=help)
    parser.add_argument("batchType", help="The type of this batch.  Used to makethe batch ID and output dir.  For example: 'organism-specific' or 'pathways'")
    parser.add_argument("batchName", help="The name of this batch.  Used to make  batch ID and the output dir.  For example: 'pfal3D7' or 'all'")
    parser.add_argument("wdkServiceUrl", help="Base url of WDK service that will run reports")
    parser.add_argument("parentDir", help="Directory in which to put the directory of output files")
    parser.add_argument("--paramName", default=None, help="Optional name of param to include in report's search")
    parser.add_argument("--paramValue", default=None, help="Optional value of param to include in report's search")
    args = parser.parse_args()
    utils.validateWebServiceUrl(args.wdkServiceUrl)
    utils.validateParentDir(args.parentDir)
    validateParam(args.paramName, args.paramValue)
    return args.batchType, args.batchName, args.wdkServiceUrl, args.parentDir, args.paramName, args.paramValue


def validateParam(paramName, paramValue):
    if ((paramName != None and paramName == None) or (paramName != None and paramName == None)):
        error("Error:  arguments --paramName and --paramValue must both be provided, or neither provided")

def validateSearchParam(paramName, searchName, searchParamNames):
    msgPrefix = "Search " + searchName
    if len(searchParamNames) > 1:
        error(msgPrefix + " has more than a single parameter")
    elif len(searchParamNames) == 0:
        if paramName is not None:
            error(msgPrefix + " does not have a parameter with name '" + paramName)
    else:
        if paramName is None:
            error(msgPrefix + " requires parameter " + searchParamNames[0])
        elif paramName != searchParamNames[0]:
            error(msgPrefix + " does not have a paramter with name " + paramName)

def getSearchUrlName(recordType, recordTypeName, paramName):
    filteredQuestions = list(filter(lambda search: 'InternalQuestions' not in search['fullName'], recordType['searches']))
    if not len(filteredQuestions) == 1:
        error("RecordType " + recordTypeName + " has more than a single search")
    search = filteredQuestions[0]
    paramNames = search['paramNames']
    validateSearchParam(paramName, search['urlSegment'], paramNames)
    return search['urlSegment']

def composeUrlParams(paramName, paramValue, recordType, batchType, batchName, batchTimestamp, batchId):
    urlParams = {}
    if paramName is not None:
        urlParams[paramName] = paramValue
    reportConfig = {}

    reportConfig['batch-type'] = batchType
    reportConfig['batch-name'] = batchName
    reportConfig['batch-timestamp'] = batchTimestamp
    reportConfig['batch-id'] = batchId
    attributes = recordType['attributes']
    reportConfig['attributes'] = list(map(lambda attribute: attribute['name'], attributes))
    reportConfig['tables'] = list(map(lambda table: table['name'], recordType['tables']))
    urlParams['reportConfig'] = json.dumps(reportConfig)
    return urlParams
        
def runReportToFile(wdkServiceUrl, workingDir, recordTypeName, searchName, paramName, paramValue, recordType, batchType, batchName, batchTimestamp, batchId):
    reportUrl = wdkServiceUrl + '/record-types/' + recordTypeName + '/searches/' + searchName + '/reports/' + REPORTNAME + '?'
    urlParams = composeUrlParams(paramName, paramValue, recordType, batchType, batchName, batchTimestamp, batchId)
    targetFilename = workingDir + "/" + recordTypeName + ".json"
    with requests.get(url=reportUrl, params=urlParams, stream=True) as response:
        if (response.status_code != 200):
            error("Received " + str(response.status_code) + " status from HTTP GET to " + reportUrl + " with parameters: " + str(urlParams))
        with open(targetFilename, 'wb') as file:
            shutil.copyfileobj(response.raw, file)

def createTarFile(path, tar_name):
    with tarfile.open(tar_name, "w:gz") as tar_handle:
        for root, dirs, files in os.walk(path):
            for file in files:
                tar_handle.add(os.path.join(root, file))

def checkRecordTypeBatch(recordType, batchType):
    if ('properties' in recordType and 'batch' in recordType['properties']):
        return recordType['properties']['batch'][0] == batchType
    else:
        error("Record type '" + recordType['urlSegment'] + "' does not contain a 'batch' property")
    

###########################################################################################################

batchType, batchName, wdkServiceUrl, parentDir, paramName, paramValue = parseAndValidateArgs()

batchTimestamp = int(time.time())
batchId = batchType + "_" + batchName + "_" + str(batchTimestamp)

outputDir = utils.createWorkingDir(parentDir, batchId)

# for each record type, find the single question in the model, and run it with the solrjson reporter
for recordTypeName in utils.getRecordTypeNames(wdkServiceUrl):
    recordType = utils.getRecordType(wdkServiceUrl, recordTypeName)
    if (checkRecordTypeBatch(recordType, batchType)): 
        print(str(datetime.datetime.now()) + " Processing record type: " + recordType['nativeDisplayName'])
        searchUrlName = getSearchUrlName(recordType, recordTypeName, paramName) 
        runReportToFile(wdkServiceUrl, outputDir, recordTypeName, searchUrlName, paramName, paramValue, recordType, batchType, batchName, batchTimestamp, batchId)

# write meta file about this batch
print(str(datetime.datetime.now()) + " writing batch.json")
utils.writeBatchJsonFile(batchType, batchName, batchTimestamp, batchId, outputDir)
print(str(datetime.datetime.now()) + " done")
    

    

