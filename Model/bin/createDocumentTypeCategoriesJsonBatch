#!/usr/bin/env python3

import json
import argparse
import sys
import os
import time
import datetime

sys.path.append(os.environ['GUS_HOME'] + "/lib/python")

import SiteSearchData.Model.BatchReportUtils as utils

TARGETDIRPREFIX = 'solr-json-batch_'
BATCHTYPE = 'documentMeta'
BATCHNAME = 'all'
DOCTYPE = 'documentCategories'
INPUT_FILE = os.environ['GUS_HOME'] + "/data/SiteSearchData/documentTypeCategories.json"

def parseAndValidateArgs():
    help = """Read the \$GUS_HOME/data/SiteSearchData/documentTypeCategories.json file and incorporate it into a small batch ready to be loaded by the solr batch loader. 

Input: none
Output: a directory containing a Solr compatible JSON file and a batch.json file with meta information.

The batch is given a generated BATCH_ID of the form: documentCategories-all-TIMESTAMP

Output files are placed in a new directory of name 'PARENTDIR/BATCH_ID'. 

"""
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description=help)
    args = parser.parse_args()
    

###########################################################################################################

parseAndValidateArgs()


batchTimestamp = int(time.time())
batchId = BATCHTYPE + "_" + BATCHNAME + "_" + str(batchTimestamp)

outputDir = utils.createWorkingDir(parentDir, batchId)
targetFilename = outputDir + "/" + BATCHTYPE + ".json"

try:
    # first check that input file is valid json
    with open(INPUT_FILE) as inputJsonFile:
        json.load(inputJsonFile)

    with open(INPUT_FILE) as inputJsonFile:
        output = {}
        jsonString = inputJsonFile.readlines()
        output['batch-type'] = BATCHTYPE
        output['batch-name'] = BATCHNAME
        output['batch-timestamp'] = batchTimestamp
        output['batch-id'] = batchId
        output['document-type'] = DOCTYPE
        output['id'] = DOCTYPE
        output['json-blob'] = jsonString
except IOError:
    utils.error("Can't open input file " + INPUT_FILE)
except:
    utils.error("Looks like input file " + INPUT_FILE + " is not valid json")
    
outputJson = json.dumps(output)
print(str(datetime.datetime.now()) + " writing " + targetFilename)
with open(targetFilename, "w") as text_file:
    text_file.write(outputJson)

# write meta file about this batch
print(str(datetime.datetime.now()) + " writing batch.json")
utils.writeBatchJsonFile(BATCHTYPE, BATCHNAME, batchTimestamp, batchId, outputDir)
print(str(datetime.datetime.now()) + " done")
    

    

