#!/usr/bin/env python3

import unittest
import subprocess
import json
import os
import argparse
import requests

# Get user and pass from environment
user = os.environ['SOLR_USER'] if ('SOLR_USER' in os.environ) else ''
passwd = os.environ['SOLR_PASSWORD'] if ('SOLR_PASSWORD' in os.environ) else ''
# Path to siteSearchLoadBatch - must be changed if script is moved relative to this file
script_path = '../bin/siteSearchLoadBatch'


def parse_args():
    parser = argparse.ArgumentParser(description='Perform unit testing on siteSearchLoadBatch.')
    parser.add_argument('core_url', help='The URL of the core to use for testing. This core must contain no data.')
    args = parser.parse_args()
    return args


def core_is_empty(core_url, require=False):
    """
    Check to see whether a core is empty.

    Args:
        core_url (str): The URL to the core to check.
        require (bool): If the core isn't empty, raise an error.

    Returns:
        bool: True if empty, False if not.
    """
    url = core_url + '/select?q=*:*&rows=0'
    request = requests.get(url, auth=(user, passwd))
    request.raise_for_status()
    empty = not json.loads(request.text)['response']['numFound']

    if require and not empty:
        raise ValueError('Solr core is not empty - testing requires an empty core. Aborting.')

    return empty


class ParameterizedTestCase(unittest.TestCase):
    """
    TestCase classes that want to be parameterized should
        inherit from this class.
    """
    def __init__(self, core_url, methodName='runTest'):
        super().__init__(methodName)
        self.core_url = core_url
        self.script_base_cmd = [script_path, core_url]

    @staticmethod
    def parameterize(testcase_class, core_url):
        """
        Create a suite containing all tests taken from the given
            subclass, passing them parameters.
        """
        testloader = unittest.TestLoader()
        testnames = testloader.getTestCaseNames(testcase_class)
        suite = unittest.TestSuite()
        for name in testnames:
            suite.addTest(testcase_class(core_url, name))
        return suite


class SiteSearchLoadBatchTestCase(ParameterizedTestCase):
    def __init__(self, core_url, methodName='runTest'):
       super().__init__(core_url, methodName)

    def setUp(self):
        """
        Setup tasks. Run before each individual test function.
        """
        # Check that the testing core is empty
        core_is_empty(self.core_url, require=True)

    def tearDown(self):
        """
        Tear-down tasks. Run after each individual test function.
        """
        # Delete all data from the core
        url = self.core_url + '/update?commit=true'
        requests.post(url, auth=(user, passwd), data='<delete><query>*:*</query></delete>', headers={'Content-Type': 'text/xml'}).raise_for_status()

    def get_solr_state(self, versions=False):
        """
        Get all documents in Solr, removing '_version_' field by default.
        Set versions to True to keep this field.
        """
        # Get all documents
        url = self.core_url + '/select?q=*:*'
        request = requests.get(url, auth=(user, passwd))
        request.raise_for_status()
        response_json = json.loads(request.text)['response']

        # Remove nondeterministic '_version_' field added by Solr
        # unless versions is True
        if not versions:
            for doc in response_json['docs']:
                del doc['_version_']

        return response_json

    def check_solr_against(self, correct_file):
        """
        Check that the state of Solr matches the state represented
        by correct_file.
        """
        current_json = self.get_solr_state()

        # Grab the correct data
        with open(correct_file) as f:
            correct_json = json.load(f)

        # Compare the two
        self.assert_states_equal(current_json, correct_json)

    def assert_states_equal(self, state_1, state_2):
        """
        Assert that two Solr state representations are equal.
        """
        self.assertEqual(state_1['numFound'], state_2['numFound'])
        self.assertCountEqual(state_1['docs'], state_2['docs'])


class IndexTestCase(SiteSearchLoadBatchTestCase):
    def test_file_success(self):
        """
        Test that indexing a single file using '--file' works.
        """
        # Index file
        file_path = 'test_data/input/index_file_success_in.json'
        cmd = self.script_base_cmd + ['index', '--file', file_path]
        process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        self.assertEqual(process.returncode, 0, process.stderr)

        # Check Solr state
        self.check_solr_against('test_data/output/index_file_success_out.json')

    def test_file_fail_json(self):
        """
        Test that indexing a file not containing a JSON array of objects fails.
        """
        # Index file
        file_path = 'test_data/input/index_file_fail_json.json'
        cmd = self.script_base_cmd + ['index', '--file', file_path]
        process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        self.assertNotEqual(process.returncode, 0, process.stdout)

        # Check that the core is still empty
        self.assertTrue(core_is_empty(self.core_url))

    def test_batch_success(self):
        """
        Test that indexing a batch using '--batch-dir' works.
        """
        # Index batch
        dir_path = 'test_data/input/valid_batches/dataset_batch-name_1000000000'
        cmd = self.script_base_cmd + ['index', '--batch-dir', dir_path]
        process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        self.assertEqual(process.returncode, 0, process.stderr)

        # Check Solr state
        self.check_solr_against('test_data/output/dataset_batch-name_1000000000.json')

    def test_batch_validate_only(self):
        """
        Test the '--validate-only' option.
        """
        # Validate batch
        dir_path = 'test_data/input/valid_batches/dataset_batch-name_1000000000'
        cmd = self.script_base_cmd + ['index', '--batch-dir', dir_path, '--validate-only']
        process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        self.assertEqual(process.returncode, 0, process.stderr)

        # Check that the core is still empty
        self.assertTrue(core_is_empty(self.core_url))

    def test_batch_already_exists(self):
        """
        Test that indexing a batch that already exists in Solr has no effect.
        """
        # Index batch
        dir_path = 'test_data/input/valid_batches/dataset_batch-name_1000000000'
        cmd = self.script_base_cmd + ['index', '--batch-dir', dir_path]
        process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        self.assertEqual(process.returncode, 0, process.stderr)

        # Get state of Solr, including doc _version_ fields
        first_state = self.get_solr_state(versions=True)

        # Try to index batch again
        process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        self.assertEqual(process.returncode, 0, process.stderr)

        # Check that Solr hasn't changed
        # This relies on the fact that the _version_ fields will change
        # on update even if we're uploading the same documents again
        second_state = self.get_solr_state(versions=True)
        self.assert_states_equal(first_state, second_state)

    def test_batch_update_success(self):
        """
        Test that updating a batch using '--batch-dir --update' works.
        """
        # Index batch
        dir_path = 'test_data/input/valid_batches/dataset_batch-name_1000000000'
        cmd = self.script_base_cmd + ['index', '--batch-dir', dir_path]
        process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        self.assertEqual(process.returncode, 0, process.stderr)

        # Update batch
        dir_path = 'test_data/input/valid_batches/dataset_batch-name_1000000001'
        cmd = self.script_base_cmd + ['index', '--batch-dir', dir_path, '--update']
        process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        self.assertEqual(process.returncode, 0, process.stderr)

        # Check Solr state
        self.check_solr_against('test_data/output/dataset_batch-name_1000000001.json')

    def test_batch_update_fail_missing(self):
        """
        Test that attempting to update a batch using '--batch-dir --update'
        fails if the batch doesn't exist in Solr.
        """
        # Attempt to update batch
        dir_path = 'test_data/input/valid_batches/dataset_batch-name_1000000001'
        cmd = self.script_base_cmd + ['index', '--batch-dir', dir_path, '--update']
        process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        self.assertNotEqual(process.returncode, 0, process.stderr)

        # Check that the core is still empty
        self.assertTrue(core_is_empty(self.core_url))

    def test_batch_fail_batch_json(self):
        """
        Test that indexing with '--batch-dir' fails if batch.json is missing.
        """
        # Index batch
        dir_path = 'test_data/input/index_batch_fail_batch_json'
        cmd = self.script_base_cmd + ['index', '--batch-dir', dir_path]
        process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        self.assertNotEqual(process.returncode, 0, process.stderr)

        # Check that the core is still empty
        self.assertTrue(core_is_empty(self.core_url))

    def test_batch_fail_invalid(self):
        """
        Test that indexing with '--batch-dir' fails if the batch is invalid.
        """
        # Index batch
        dir_path = 'test_data/input/index_batch_fail_invalid'
        cmd = self.script_base_cmd + ['index', '--batch-dir', dir_path]
        process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        self.assertNotEqual(process.returncode, 0, process.stderr)

        # Check that the core is still empty
        self.assertTrue(core_is_empty(self.core_url))

    def test_batch_fail_version_exists(self):
        """
        Test that attempting to index a batch with '--batch-dir' fails when
        a different version of the batch is already loaded.
        """
        # Index batch
        dir_path = 'test_data/input/valid_batches/dataset_batch-name_1000000000'
        cmd = self.script_base_cmd + ['index', '--batch-dir', dir_path]
        process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        self.assertEqual(process.returncode, 0, process.stderr)

        # Attempt to index different batch version
        dir_path = 'test_data/input/valid_batches/dataset_batch-name_1000000001'
        cmd = self.script_base_cmd + ['index', '--batch-dir', dir_path,]
        process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        self.assertNotEqual(process.returncode, 0, process.stderr)

        # Check Solr state
        self.check_solr_against('test_data/output/dataset_batch-name_1000000000.json')

    def test_batch_fail_batch_docs_exist(self):
        """
        Test that attempting to index a batch fails when documents from the
        batch exist in Solr without a corresponding batch-meta document.
        """
        # Index file
        dir_path = 'test_data/input/valid_batches/dataset_batch-name_1000000000'
        file_path = dir_path + '/data_file_0.json'
        cmd = self.script_base_cmd + ['index', '--file', file_path]
        process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        self.assertEqual(process.returncode, 0, process.stderr)

        # Attempt to index batch
        cmd = self.script_base_cmd + ['index', '--batch-dir', dir_path]
        process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        self.assertNotEqual(process.returncode, 0, process.stderr)

        # Check Solr state
        self.check_solr_against('test_data/output/dataset_batch-name_1000000000_file_0.json')

if __name__ == '__main__':
    # Parse arguments
    args = parse_args()

    # Check that the testing core is empty
    core_is_empty(args.core_url, require=True)

    # Run tests
    suite = unittest.TestSuite()
    suite.addTest(ParameterizedTestCase.parameterize(IndexTestCase, core_url=args.core_url))
    unittest.TextTestRunner(verbosity=2).run(suite)
